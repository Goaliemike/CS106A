import acm.program.*;public class Sudoku extends ConsoleProgram {	public void run() {		println(checkSudokuSolution(GRID));	}	private boolean checkSudokuSolution(int[][] grid) {		for (int i = 0; i < 9; i++) {			if (hasDuplicatesOrIllegalValues(getRow(grid, i))) return false;			if (hasDuplicatesOrIllegalValues(getColumn(grid, i))) return false;			if (hasDuplicatesOrIllegalValues(get3x3Square(grid, i))) return false;		}		return true;	}	private boolean hasDuplicatesOrIllegalValues(int[] array) {		boolean[] alreadySeen = new boolean[10];		for (int i = 0; i < 9; i++) {			int value = array[i];			if (value < 1 || value > 9 || alreadySeen[value]) return true;			alreadySeen[value] = true;		}		return false;	}	private int[] getRow(int[][] grid, int k) {		return grid[k];	}	private int[] getColumn(int[][] grid, int k) {		int[] column = new int[9];		for (int i = 0; i < 9; i++) {			column[i] = grid[i][k];		}		return column;	}	private int[] get3x3Square(int[][] grid, int k) {		int baseRow = k / 3 * 3;		int baseCol = k % 3 * 3;		int[] array = new int[9];		for (int i = 0; i < 9; i++) {			array[i] = grid[baseRow + i / 3][baseCol + i % 3];		}		return array;	}	private static final int[][] GRID = {		{ 3, 9, 2, 4, 6, 5, 8, 1, 7 },		{ 7, 4, 1, 8, 9, 3, 6, 2, 5 },		{ 6, 8, 5, 2, 7, 1, 4, 3, 9 },		{ 2, 5, 4, 1, 3, 8, 7, 9, 6 },		{ 8, 3, 9, 6, 2, 7, 1, 5, 4 },		{ 1, 7, 6, 9, 5, 4, 2, 8, 3 },		{ 9, 6, 7, 5, 8, 2, 3, 4, 1 },		{ 4, 2, 3, 7, 1, 9, 5, 6, 8 },		{ 5, 1, 8, 3, 4, 6, 9, 7, 2 }	};}